[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ejemplo 8",
    "section": "",
    "text": "El paquete caret, incluye una serie de funciones que facilitan el uso de decenas de métodos complejos de clasificación y regresión.\n\nlibrary(dplyr)\nlibrary(caret)\nlibrary(package = \"lattice\")\ndf = read.csv(\"C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv\")\n\nLas variables consideradas corresponden a distintos aspectos de la forma del núcleo. El fichero contiene un data frame, llamado breast.cancer2.\nLa función head() en R se usa para mostrar las primeras filas de un marco de datos o una matriz. Le permite inspeccionar rápidamente la estructura y el contenido de los datos.\n\nhead(df)\n\n  Row.ID      State Region        Category Sub.Category    Sales    Profit\n1      1   Kentucky  South       Furniture    Bookcases 261.9600   41.9136\n2      2   Kentucky  South       Furniture       Chairs 731.9400  219.5820\n3      3 California   West Office Supplies       Labels  14.6200    6.8714\n4      4    Florida  South       Furniture       Tables 957.5775 -383.0310\n5      5    Florida  South Office Supplies      Storage  22.3680    2.5164\n6      6 California   West       Furniture  Furnishings  48.8600   14.1694\n\n\nGeom_bar es la función que se utiliza en ggplot2 para hacer un gráfico de barras, se agrega al objeto ggplot creado (g) con un +, especificando el color y relleno del gràfico o bien se puede añadir en una capa adicional. Finalemente se agrega el titulo y nombre de la etiqueta en el eje x al gràfico con labs.\n\nlibrary(\"ggplot2\")\ng &lt;- ggplot(df, aes(Sales))+ geom_bar(fill = \"gray\", colour = \"green\")\ng + labs(list(title = \"Datos\", x=\"Sales\"))"
  },
  {
    "objectID": "index.html#ejemplo-4",
    "href": "index.html#ejemplo-4",
    "title": "Ejemplo 8",
    "section": "Ejemplo 4",
    "text": "Ejemplo 4\nSe cargan los paquetes en el ordenador, y luego se le pide a R que los cargue para usarlos. Hacemos esto mediante el comando library(librería).\nlibrary(tokenizers) utilizando esta funciones proporcionadas por la librería “tokenizers”, se puede tokenizar el texto en palabras, caracteres u otros elementos.\nlibrary(tidyverse) es una colección de paquetes R diseñados para la manipulación, exploración y visualización de datos.\n\nlibrary(tidyverse)\nlibrary(tokenizers)\n\nSegmentación de palabrassegmentación-de-palabras en esta sección vamos a trabajar con un único párrafo. Este ejemplo pertenece al comienzo del último discurso sobre el Estado de la Unión de Barack Obama en 2016.\n\ntexto &lt;- paste(\"También entiendo que como es temporada de elecciones, las expectativas para lo que lograremos este año son bajas. Aún así, señor Presidente de la Cámara de Representantes, aprecio el enfoque constructivo que usted y los otros líderes adoptaron a finales del año pasado para aprobar un presupuesto, y hacer permanentes los recortes de impuestos para las familias trabajadoras. Así que espero que este año podamos trabajar juntos en prioridades bipartidistas como la reforma de la justicia penal y ayudar a la gente que está luchando contra la adicción a fármacos de prescripción. Tal vez podamos sorprender de nuevo a los cínicos.\")\n\nPara procesamiento del texto vamos a usar la función tokenize_words (segmentar palabras) del paquete tokenizers para dividir el texto en palabras individuales.\nImprimir los resultados en la ventana de la consola de R\n\npalabras &lt;- tokenize_words(texto)\n\npalabras\n\n[[1]]\n  [1] \"también\"        \"entiendo\"       \"que\"            \"como\"          \n  [5] \"es\"             \"temporada\"      \"de\"             \"elecciones\"    \n  [9] \"las\"            \"expectativas\"   \"para\"           \"lo\"            \n [13] \"que\"            \"lograremos\"     \"este\"           \"año\"           \n [17] \"son\"            \"bajas\"          \"aún\"            \"así\"           \n [21] \"señor\"          \"presidente\"     \"de\"             \"la\"            \n [25] \"cámara\"         \"de\"             \"representantes\" \"aprecio\"       \n [29] \"el\"             \"enfoque\"        \"constructivo\"   \"que\"           \n [33] \"usted\"          \"y\"              \"los\"            \"otros\"         \n [37] \"líderes\"        \"adoptaron\"      \"a\"              \"finales\"       \n [41] \"del\"            \"año\"            \"pasado\"         \"para\"          \n [45] \"aprobar\"        \"un\"             \"presupuesto\"    \"y\"             \n [49] \"hacer\"          \"permanentes\"    \"los\"            \"recortes\"      \n [53] \"de\"             \"impuestos\"      \"para\"           \"las\"           \n [57] \"familias\"       \"trabajadoras\"   \"así\"            \"que\"           \n [61] \"espero\"         \"que\"            \"este\"           \"año\"           \n [65] \"podamos\"        \"trabajar\"       \"juntos\"         \"en\"            \n [69] \"prioridades\"    \"bipartidistas\"  \"como\"           \"la\"            \n [73] \"reforma\"        \"de\"             \"la\"             \"justicia\"      \n [77] \"penal\"          \"y\"              \"ayudar\"         \"a\"             \n [81] \"la\"             \"gente\"          \"que\"            \"está\"          \n [85] \"luchando\"       \"contra\"         \"la\"             \"adicción\"      \n [89] \"a\"              \"fármacos\"       \"de\"             \"prescripción\"  \n [93] \"tal\"            \"vez\"            \"podamos\"        \"sorprender\"    \n [97] \"de\"             \"nuevo\"          \"a\"              \"los\"           \n[101] \"cínicos\"       \n\n\nfunción length (longitud) para determinar cuantas palabras hay en este fragmento de texto\n\nlength(palabras[[1]])\n\n[1] 101\n\n\nEs posible calcular cuántas veces se utilizó cada palabra en el texto. Para hacer esto, primero aplicamos la función table(tabla) a las palabras en el primer (y aquí, único) documento y después separamos los nombres y los valores de la tabla en un único objeto llamado marco de datos (data frame).\n\ntabla &lt;- table(palabras[[1]])\ntabla &lt;- data_frame(palabra = names(tabla), recuento = as.numeric(tabla))\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\ntabla\n\n# A tibble: 70 × 2\n   palabra   recuento\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 a                4\n 2 adicción         1\n 3 adoptaron        1\n 4 año              3\n 5 aprecio          1\n 6 aprobar          1\n 7 así              2\n 8 aún              1\n 9 ayudar           1\n10 bajas            1\n# ℹ 60 more rows\n\n\nOrdenar datos usando la función arrange(organizar). Esta función toma el conjunto de datos sobre el que trabajar, aquí tabla, y después el nombre de la columna que toma como referencia para ordenarlo. La función desc en el segundo argumento indica que queremos clasificar en orden descendiente.\n\narrange(tabla, desc(recuento))\n\n# A tibble: 70 × 2\n   palabra recuento\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 de             7\n 2 que            6\n 3 la             5\n 4 a              4\n 5 año            3\n 6 los            3\n 7 para           3\n 8 y              3\n 9 así            2\n10 como           2\n# ℹ 60 more rows"
  },
  {
    "objectID": "index.html#ejemplos-3-r",
    "href": "index.html#ejemplos-3-r",
    "title": "Ejemplo 8",
    "section": "Ejemplos 3 R",
    "text": "Ejemplos 3 R\nTidyr es un paquete de R que permite ordenar datos “sucios” para obtener objetos de datos en R, en este caso se utilizará para combinar columnas\n\nlibrary(tidyr)\n\nLectura de datos de archivos xlsx, usando la Liberia readxl\nEl archivo xlsx contiene un marco de datos con las columnas a combinar y es almacenada en la variable datos\n\nlibrary(readxl)\ndatos &lt;- read_excel(\"~/datos.xlsx\")\n\nLa función gather toma múltiples columnas y las une en pares clave-valor. Apartir de “datos” se modifica, “años” en el nombre de la nueva columna y “ventas” es para almacenar los valores originales\n\nlibrary(tidyr)\ninforme &lt;- datos %&gt;% gather(años, ventas, \"2009\":\"2012\") \ninforme\n\n# A tibble: 12 × 3\n   Cliente años  ventas\n   &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n 1 María   2009    1289\n 2 Juan    2009     900\n 3 Mauro   2009     750\n 4 María   2010    1400\n 5 Juan    2010    1175\n 6 Mauro   2010     800\n 7 María   2011    1450\n 8 Juan    2011    1175\n 9 Mauro   2011     810\n10 María   2012    1500\n11 Juan    2012    1250\n12 Mauro   2012     815\n\n\n\nlibrary(ggplot2)\n\n\nggplot(\n informe,\n  aes(x = informe$Cliente, y = informe$ventas, color = informe$años)) + \n  geom_point() +\n  labs(x = \"cliente\", y = \"ventas\") +\n  theme(legend.position = \"bottom\")\n\nWarning: Use of `informe$Cliente` is discouraged.\nℹ Use `Cliente` instead.\n\n\nWarning: Use of `informe$ventas` is discouraged.\nℹ Use `ventas` instead.\n\n\nWarning: Use of `informe$años` is discouraged.\nℹ Use `años` instead."
  },
  {
    "objectID": "index.html#ejemplo-2",
    "href": "index.html#ejemplo-2",
    "title": "Ejemplo 8",
    "section": "Ejemplo 2",
    "text": "Ejemplo 2\n\nCargar el paquete dplyr y DT:\n\n\nlibrary(dplyr)\nlibrary(DT)\n\n\nUtilizar la función filter() para filtrar el dataset de iris y seleccionar solo las filas que cumplan con ciertas condiciones. Por ejemplo, seleccionar las filas donde la longitud del sépalo sea mayor a 5:\n\n\niris_filtrado &lt;- iris %&gt;% filter(Sepal.Length &gt; 5)\n\n\niris_filtrado &lt;- head(iris_filtrado, 30)\niris_filtrado[1] %&gt;% datatable\n\n\n\n\n\n\n\nUtilizar la función select() para seleccionar solo las columnas deseadas del dataset. Por ejemplo, seleccionar las columnas de longitud del sépalo y ancho del pétalo:\n\n\niris_seleccionado &lt;- iris_filtrado %&gt;% select(Sepal.Length, Petal.Width)\n\n\nUtilizar la función mutate() para crear una nueva columna en el dataset basada en cálculos o transformaciones de las columnas existentes. Por ejemplo, crear una columna que calcule el producto de la longitud del sépalo y el ancho del pétalo:\n\n\niris_transformado &lt;- iris_seleccionado %&gt;% mutate(Nueva_Columna = Sepal.Length * Petal.Width)\n\n\nUtilizar la función arrange() para ordenar el dataset en base a una columna específica. Por ejemplo, ordenar el dataset por la longitud del sépalo de forma descendente:\n\n\niris_ordenado &lt;- iris_transformado %&gt;% arrange(desc(Sepal.Length))\n\n\niris_ordenado[1] %&gt;% datatable"
  },
  {
    "objectID": "practica-de-asignacion-1.html",
    "href": "practica-de-asignacion-1.html",
    "title": "Asignación",
    "section": "",
    "text": "Libreria DT, dataTables que permite mostrar datos de R en una tabla interactiva en una página web.\nLa librería dplyr en R es una herramienta muy útil para la manipulación de datos.\n\nlibrary(DT)\nlibrary(dplyr)\n\npara la lecctura de archivos cvs se utilizá la función read.cvs para leer el archivo CSV\n\ndatos&lt;- read.csv(\"C:/Users/itzi2/Downloads/lista-empresas.csv\")\n\nLa función selec() en R es parte de la librería dplyr y se utiliza para seleccionar columnas específicas de un marco de datos. se puede utilizar esta función para extraer las columnas que necesitas y descartar las que no son relevantes en el análisis.\n\ndatos_filtrados &lt;- select(datos, Industria, Derpartmento)\ndatos_filtrados\n\n     Industria        Derpartmento\n1        Banco     Recursos Humano\n2        Banco     Recursos Humano\n3        Banco Servicio al Cliente\n4  Cooperativa Servicio al Cliente\n5  Cooperativa            Asociado\n6  Cooperativa            Asociado\n7  Cooperativa            Asociado\n8  Cooperativa            Asociado\n9  Cooperativa            Asociado\n10     Seguros              Poliza\n11     Seguros              Poliza\n12     Seguros              Poliza\n13     Seguros              Cobros\n14     Seguros              Cobros\n15     Seguros              Cobros\n16  Tecnologia              Cobros\n17  Tecnologia Servicio al Cliente\n18  Tecnologia              Cobros\n\n\nLa función select() en R, como se muestra en los resultados de búsqueda, es parte de la librería dplyr y se utiliza para seleccionar columnas específicas de un dataframe. Puedes utilizar esta función para extraer las columnas que necesitas de un dataframe. Aquí tienes un ejemplo básico de cómo utilizar la función select():\n\nenlace &lt;- select(datos, Link, Etiqueta)\nenlace\n\n                                   Link                  Etiqueta\n1          https://www.banconal.com.pa/            Banco Nacional\n2          https://www.banconal.com.pa/            Banco Nacional\n3          https://www.banconal.com.pa/            Banco Nacional\n4             https://www.coeduco.coop/                   COEDUCO\n5             https://www.coeduco.coop/                   COEDUCO\n6             https://www.coeduco.coop/                   COEDUCO\n7  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n8  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n9  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n10            https://www.iseguros.com/  Internacional de Seguros\n11            https://www.iseguros.com/  Internacional de Seguros\n12            https://www.iseguros.com/  Internacional de Seguros\n13                https://www.sura.com/                      Sura\n14                https://www.sura.com/                      Sura\n15                https://www.sura.com/                      Sura\n16                         www.dell.com                      DELL\n17                         www.dell.com                      DELL\n18                         www.dell.com                      DELL\n\n\nEl código que se muestra utiliza la librería purrr de R para crear una lista de enlaces HTML a partir de un dataframe llamado enlace. En particular, utiliza la función map2() de purrr, que itera sobre dos vectores simultáneamente y aplica una función a cada par de elementos. En este caso, la función toma el enlace y la etiqueta correspondiente de cada fila del dataframe enlace, y los combina en un enlace HTML utilizando la función paste0(). El resultado es una lista de enlaces HTML que se guarda en la variable vinculo.\n\nlibrary(purrr)\nvinculo&lt;-list()\nvinculo&lt;- map2(enlace$Link,seq_along(enlace$Link),function(link,i){\n  combinacion &lt;- paste0(\"&lt;a href='\",link,\"' &gt;\",enlace$Etiqueta[[i]],\"&lt;/a&gt;\")\n})\nvinculo&lt;- vinculo %&gt;% do.call(rbind, .)%&gt;% data_frame(Vinculo=.)\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\n\nEl código que se muestra utiliza la función cbind() para combinar dos dataframes: datos_filtrados y vinculo. Luego, utiliza el operador %&gt;% para pasar el resultado a la función datatable() de la librería DT. Esta función convierte el dataframe en una tabla interactiva que se puede mostrar en una página web.\n\ncbind(datos_filtrados, vinculo)%&gt;% datatable(filter = \"bottom\",escape = FALSE)"
  },
  {
    "objectID": "practica-de-asignacion-1.html#asignación-1-despliegue-de-hipervinculo",
    "href": "practica-de-asignacion-1.html#asignación-1-despliegue-de-hipervinculo",
    "title": "Asignación",
    "section": "",
    "text": "Libreria DT, dataTables que permite mostrar datos de R en una tabla interactiva en una página web.\nLa librería dplyr en R es una herramienta muy útil para la manipulación de datos.\n\nlibrary(DT)\nlibrary(dplyr)\n\npara la lecctura de archivos cvs se utilizá la función read.cvs para leer el archivo CSV\n\ndatos&lt;- read.csv(\"C:/Users/itzi2/Downloads/lista-empresas.csv\")\n\nLa función selec() en R es parte de la librería dplyr y se utiliza para seleccionar columnas específicas de un marco de datos. se puede utilizar esta función para extraer las columnas que necesitas y descartar las que no son relevantes en el análisis.\n\ndatos_filtrados &lt;- select(datos, Industria, Derpartmento)\ndatos_filtrados\n\n     Industria        Derpartmento\n1        Banco     Recursos Humano\n2        Banco     Recursos Humano\n3        Banco Servicio al Cliente\n4  Cooperativa Servicio al Cliente\n5  Cooperativa            Asociado\n6  Cooperativa            Asociado\n7  Cooperativa            Asociado\n8  Cooperativa            Asociado\n9  Cooperativa            Asociado\n10     Seguros              Poliza\n11     Seguros              Poliza\n12     Seguros              Poliza\n13     Seguros              Cobros\n14     Seguros              Cobros\n15     Seguros              Cobros\n16  Tecnologia              Cobros\n17  Tecnologia Servicio al Cliente\n18  Tecnologia              Cobros\n\n\nLa función select() en R, como se muestra en los resultados de búsqueda, es parte de la librería dplyr y se utiliza para seleccionar columnas específicas de un dataframe. Puedes utilizar esta función para extraer las columnas que necesitas de un dataframe. Aquí tienes un ejemplo básico de cómo utilizar la función select():\n\nenlace &lt;- select(datos, Link, Etiqueta)\nenlace\n\n                                   Link                  Etiqueta\n1          https://www.banconal.com.pa/            Banco Nacional\n2          https://www.banconal.com.pa/            Banco Nacional\n3          https://www.banconal.com.pa/            Banco Nacional\n4             https://www.coeduco.coop/                   COEDUCO\n5             https://www.coeduco.coop/                   COEDUCO\n6             https://www.coeduco.coop/                   COEDUCO\n7  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n8  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n9  https://www.cooprofesionales.com.pa/ Cooperativa Profesionales\n10            https://www.iseguros.com/  Internacional de Seguros\n11            https://www.iseguros.com/  Internacional de Seguros\n12            https://www.iseguros.com/  Internacional de Seguros\n13                https://www.sura.com/                      Sura\n14                https://www.sura.com/                      Sura\n15                https://www.sura.com/                      Sura\n16                         www.dell.com                      DELL\n17                         www.dell.com                      DELL\n18                         www.dell.com                      DELL\n\n\nEl código que se muestra utiliza la librería purrr de R para crear una lista de enlaces HTML a partir de un dataframe llamado enlace. En particular, utiliza la función map2() de purrr, que itera sobre dos vectores simultáneamente y aplica una función a cada par de elementos. En este caso, la función toma el enlace y la etiqueta correspondiente de cada fila del dataframe enlace, y los combina en un enlace HTML utilizando la función paste0(). El resultado es una lista de enlaces HTML que se guarda en la variable vinculo.\n\nlibrary(purrr)\nvinculo&lt;-list()\nvinculo&lt;- map2(enlace$Link,seq_along(enlace$Link),function(link,i){\n  combinacion &lt;- paste0(\"&lt;a href='\",link,\"' &gt;\",enlace$Etiqueta[[i]],\"&lt;/a&gt;\")\n})\nvinculo&lt;- vinculo %&gt;% do.call(rbind, .)%&gt;% data_frame(Vinculo=.)\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\n\nEl código que se muestra utiliza la función cbind() para combinar dos dataframes: datos_filtrados y vinculo. Luego, utiliza el operador %&gt;% para pasar el resultado a la función datatable() de la librería DT. Esta función convierte el dataframe en una tabla interactiva que se puede mostrar en una página web.\n\ncbind(datos_filtrados, vinculo)%&gt;% datatable(filter = \"bottom\",escape = FALSE)"
  },
  {
    "objectID": "ejemplo de hiperlink.html",
    "href": "ejemplo de hiperlink.html",
    "title": "ejemplo hiperlink",
    "section": "",
    "text": "library(DT)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\n\nLa librería readxl se utiliza para leer archivos de Excel en R.\n\ndatos&lt;- read_excel(\"C:/Users/itzi2/Downloads/dp-gallery-link.xlsx\")\ndatos\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nLa función select() de la librería dplyr se utiliza para seleccionar columnas específicas de un data frame. En este caso se selecciona de la tabla datos la columna area\n\ndatos_filtrados &lt;- select(datos,Area)\ndatos_filtrados\n\n# A tibble: 37 × 1\n   Area              \n   &lt;chr&gt;             \n 1 Health            \n 2 Agriculture       \n 3 World Economic    \n 4 Financial Services\n 5 Insurance         \n 6 Logistic          \n 7 Ambient           \n 8 Retail-Sales      \n 9 Health            \n10 Real Estate       \n# ℹ 27 more rows\n\n\nLa función select() de la librería dplyr se utiliza para seleccionar columnas específicas de un data frame. En el código, se utiliza select() para seleccionar la columna “Area” del data frame “datos”\n\nenlace &lt;- select(datos, Category,Link)\nenlace\n\n# A tibble: 37 × 2\n   Category       Link                                                        \n   &lt;chr&gt;          &lt;chr&gt;                                                       \n 1 Cadio Vascular https://dataspeople.ai/post/gallery/dp-cardio-vascular.html \n 2 Wine           https://dataspeople.ai/post/gallery/dp-wine-quality.html    \n 3 Wolrd Econimic https://dataspeople.ai/post/gallery/dp-world-population.html\n 4 Credit         https://dataspeople.ai/post/gallery/dp-credit-customer.html \n 5 Cars Loss      https://dataspeople.ai/post/gallery/dp-crash-automobile.html\n 6 Supply Chain   https://dataspeople.ai/post/gallery/dp-supply-chain.html    \n 7 Forest Fire    https://dataspeople.ai/post/gallery/dp-forestfire.html      \n 8 Supermarket    https://dataspeople.ai/post/gallery/dp-supermarket.html     \n 9 Disease        https://dataspeople.ai/post/gallery/dp-disease-sympton.html \n10 Real Estate    https://dataspeople.ai/post/gallery/dp-housing.html         \n# ℹ 27 more rows\n\n\nLa primera línea carga las librerías purrr y dplyr. La segunda línea crea una lista vacía llamada “vinculo”. La tercera línea utiliza la función map2() de purrr para iterar sobre los valores de la columna “Link” del data frame “enlace” y los índices correspondientes. Dentro de la función map2(), se utiliza la función paste0() para concatenar el valor de la columna “Link” con el texto de la columna “Category” en un formato de hipervínculo HTML. La cuarta línea utiliza do.call() y rbind() para combinar los elementos de la lista en un data frame. La quinta línea utiliza data_frame() de dplyr para convertir el resultado en un data frame con una columna llamada “Category”.\n\nlibrary(purrr)\nvinculo&lt;-list()\nvinculo&lt;- map2(enlace$Link,seq_along(enlace$Link),function(Link,i){\n  combinacion &lt;- paste0(\"&lt;a href='\",Link,\"' &gt;\",enlace$Category[[i]],\"&lt;/a&gt;\")\n})\nvinculo&lt;- vinculo %&gt;% do.call(rbind, .)%&gt;% data_frame(Category=.)\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\nFunción cbind() para combinar dos objetos: datos_filtrados y vinculo.\n\nresultado&lt;-cbind(datos_filtrados, vinculo)\n\nVisualización del resultado en una tabla interactiva utilizando la función datatable() de la librería DT\n\nresultado %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)\n\n\n\n\n\n\nLa extensión RowGroup para DataTables proporciona una función de agrupación de filas fácil de usar para DataTables. Los ejemplos que se muestran aquí demuestran cómo se puede usar, configurar y diseñar.\nresultado[order(resultado$Area), ]: Esto ordena el objeto resultado por la columna “Area” en orden ascendente. escape = FALSE: Esto indica que no se deben escapar las entidades HTML en la tabla. extensions = “RowGroup”: Esto carga la extensión “RowGroup” de DataTables, que permite agrupar filas en la tabla. options = list(rowGroup = list(dataSrc = 0)): Esto configura la opción rowGroup para agrupar las filas por la primera columna. rownames = FALSE: Esto indica que no se deben mostrar los nombres de las filas en la tabla.\n\ndatatable(\n  resultado[order(resultado$Area), ],\n  escape = FALSE, \n  extensions = \"RowGroup\", \n  options = list(\n    rowGroup = list(dataSrc = 0)\n  ),\n  rownames = FALSE\n)"
  },
  {
    "objectID": "ejemplos de hiperlik.html",
    "href": "ejemplos de hiperlik.html",
    "title": "ejemplo hiperlink",
    "section": "",
    "text": "library(DT)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(readxl)\n\nLa librería readxl se utiliza para leer archivos de Excel en R.\n\ndatos&lt;- read_excel(\"C:/Users/itzi2/Downloads/dp-gallery-link.xlsx\")\ndatos\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nLa función select() de la librería dplyr se utiliza para seleccionar columnas específicas de un data frame. En este caso se selecciona de la tabla datos la columna area\n\ndatos_filtrados &lt;- select(datos,Area)\ndatos_filtrados\n\n# A tibble: 37 × 1\n   Area              \n   &lt;chr&gt;             \n 1 Health            \n 2 Agriculture       \n 3 World Economic    \n 4 Financial Services\n 5 Insurance         \n 6 Logistic          \n 7 Ambient           \n 8 Retail-Sales      \n 9 Health            \n10 Real Estate       \n# ℹ 27 more rows\n\n\nLa función select() de la librería dplyr se utiliza para seleccionar columnas específicas de un data frame. En el código, se utiliza select() para seleccionar la columna “Area” del data frame “datos”\n\nenlace &lt;- select(datos, Category,Link)\nenlace\n\n# A tibble: 37 × 2\n   Category       Link                                                        \n   &lt;chr&gt;          &lt;chr&gt;                                                       \n 1 Cadio Vascular https://dataspeople.ai/post/gallery/dp-cardio-vascular.html \n 2 Wine           https://dataspeople.ai/post/gallery/dp-wine-quality.html    \n 3 Wolrd Econimic https://dataspeople.ai/post/gallery/dp-world-population.html\n 4 Credit         https://dataspeople.ai/post/gallery/dp-credit-customer.html \n 5 Cars Loss      https://dataspeople.ai/post/gallery/dp-crash-automobile.html\n 6 Supply Chain   https://dataspeople.ai/post/gallery/dp-supply-chain.html    \n 7 Forest Fire    https://dataspeople.ai/post/gallery/dp-forestfire.html      \n 8 Supermarket    https://dataspeople.ai/post/gallery/dp-supermarket.html     \n 9 Disease        https://dataspeople.ai/post/gallery/dp-disease-sympton.html \n10 Real Estate    https://dataspeople.ai/post/gallery/dp-housing.html         \n# ℹ 27 more rows\n\n\nLa primera línea carga las librerías purrr y dplyr. La segunda línea crea una lista vacía llamada “vinculo”. La tercera línea utiliza la función map2() de purrr para iterar sobre los valores de la columna “Link” del data frame “enlace” y los índices correspondientes. Dentro de la función map2(), se utiliza la función paste0() para concatenar el valor de la columna “Link” con el texto de la columna “Category” en un formato de hipervínculo HTML. La cuarta línea utiliza do.call() y rbind() para combinar los elementos de la lista en un data frame. La quinta línea utiliza data_frame() de dplyr para convertir el resultado en un data frame con una columna llamada “Category”.\n\nlibrary(purrr)\nvinculo&lt;-list()\nvinculo&lt;- map2(enlace$Link,seq_along(enlace$Link),function(Link,i){\n  combinacion &lt;- paste0(\"&lt;a href='\",Link,\"' &gt;\",enlace$Category[[i]],\"&lt;/a&gt;\")\n})\nvinculo&lt;- vinculo %&gt;% do.call(rbind, .)%&gt;% data_frame(Category=.)\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\nFunción cbind() para combinar dos objetos: datos_filtrados y vinculo.\n\nresultado&lt;-cbind(datos_filtrados, vinculo)\n\nVisualización del resultado en una tabla interactiva utilizando la función datatable() de la librería DT\n\nresultado %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)\n\n\n\n\n\n\n##{r} kbl(resultado) %&gt;%   kable_classic(\"hover\")\n##{r} library(kableExtra) resultado %&gt;%   kbl() %&gt;%   kable_paper(\"hover\",                full_width = F) La extensión RowGroup para DataTables proporciona una función de agrupación de filas fácil de usar para DataTables. Los ejemplos que se muestran aquí demuestran cómo se puede usar, configurar y diseñar.\nresultado[order(resultado$Area), ]: Esto ordena el objeto resultado por la columna “Area” en orden ascendente. escape = FALSE: Esto indica que no se deben escapar las entidades HTML en la tabla. extensions = “RowGroup”: Esto carga la extensión “RowGroup” de DataTables, que permite agrupar filas en la tabla. options = list(rowGroup = list(dataSrc = 0)): Esto configura la opción rowGroup para agrupar las filas por la primera columna. rownames = FALSE: Esto indica que no se deben mostrar los nombres de las filas en la tabla.\n\ndatatable(\n  resultado[order(resultado$Area), ],\n  escape = FALSE, \n  extensions = \"RowGroup\", \n  options = list(\n    rowGroup = list(dataSrc = 0)\n  ),\n  rownames = FALSE\n)"
  },
  {
    "objectID": "index.html#asignación-1",
    "href": "index.html#asignación-1",
    "title": "Ejemplo 8",
    "section": "Asignación 1",
    "text": "Asignación 1"
  },
  {
    "objectID": "index.html#asignación-2",
    "href": "index.html#asignación-2",
    "title": "Ejemplo 8",
    "section": "Asignación 2",
    "text": "Asignación 2"
  },
  {
    "objectID": "Dividir texto en Columna stringr.html",
    "href": "Dividir texto en Columna stringr.html",
    "title": "Stringr dividir en columnas",
    "section": "",
    "text": "library(DT)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\nEn este código, la función read.csv() se usa para leer el archivo CSV llamado “DatosPeronales - StringR.csv” ubicado en el directorio de trabajo actual. La ruta del archivo se especifica mediante el argumento del archivo. Después de ejecutar este código, los datos del archivo CSV se almacenarán en la variable datos como un marco de datos.\n\ndatos&lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\n\nLa función de separación () se utiliza para dividir una columna en varias columnas en función de un delimitador. El argumento into especifica los nombres de las nuevas columnas que se van a crear y el argumento sep especifica el delimitador que se usará para dividir. En este código, la columna Nombre se divide en dos columnas ‘Nombre’ y ‘Edad’ usando los delimitadores - y /. Luego, la columna Dirección se divide en dos columnas ‘Provincia’ y ‘Distrito’ usando el delimitador -.\n\ndatos_dividi &lt;- datos %&gt;% \n  separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"-| /\") %&gt;%\n  separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\") \n\nEn este código, la función datatable() se usa para mostrar el marco de datos datos_dividi como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla.\n\n datos_dividi %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "index.html#asignación-3",
    "href": "index.html#asignación-3",
    "title": "Ejemplo 8",
    "section": "Asignación 3",
    "text": "Asignación 3"
  },
  {
    "objectID": "Ordenar columnas ascendente y descendente.html",
    "href": "Ordenar columnas ascendente y descendente.html",
    "title": "ejemplo 5",
    "section": "",
    "text": "library(DT)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(stringr)\n\nEn este código, la función read.csv() se usa para leer el archivo CSV llamado “DatosPeronales - StringR.csv” ubicado en el directorio de trabajo actual. La ruta del archivo se especifica mediante el argumento del archivo. Después de ejecutar este código, los datos del archivo CSV se almacenarán en la variable datos como un marco de datos.\n\ndatos&lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\ndatos\n\n        Nombre        Dirección\n1    Juan / 12 Coclé - Penonomé\n2     Ana / 20     Coclé - Natá\n3   Pedro / 34      Coclé - Olá\n4     Rosa / 5    Coclé - Antón\n5  Esther / 56 Coclé - Penonomé\n6   Mario / 17 Coclé - Penonomé\n7   Javier -45     Coclé - Natá\n8  Carlos - 23      Coclé - Olá\n9   Dilia - 22    Coclé - Antón\n10 Indira - 15 Coclé - Penonomé\n\n\nLa función de separación () se utiliza para dividir una columna en varias columnas en función de un delimitador. El argumento into especifica los nombres de las nuevas columnas que se van a crear y el argumento sep especifica el delimitador que se usará para dividir. En este código, la columna Nombre se divide en dos columnas ‘Nombre’ y ‘Edad’ usando los delimitadores - y /. Luego, la columna Dirección se divide en dos columnas ‘Provincia’ y ‘Distrito’ usando el delimitador -.\n\ndatos_dividi &lt;- datos %&gt;% \n  separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"-| /\") %&gt;%\n  separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\") \n\nEl código df &lt;- data.frame( datos_dividi ) utiliza la función data.frame() para crear un nuevo marco de datos df a partir del objeto datos_dividi.\n\ndf &lt;- data.frame( datos_dividi )\n\nEl código de arrange(datos_dividi, Edad) está usando la función de arrange() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Edad. Esta función se usa comúnmente para ordenar marcos de datos en R.\n\narrange(datos_dividi , Edad)\n\n    Nombre Edad Provincia  Distrito\n1     Juan   12    Coclé   Penonomé\n2  Indira    15    Coclé   Penonomé\n3    Mario   17    Coclé   Penonomé\n4      Ana   20    Coclé       Natá\n5   Dilia    22    Coclé      Antón\n6  Carlos    23    Coclé        Olá\n7    Pedro   34    Coclé        Olá\n8     Rosa    5    Coclé      Antón\n9   Esther   56    Coclé   Penonomé\n10 Javier    45    Coclé       Natá\n\n\nEl código nuevo &lt;-arrange(datos_dividi, desc(Distrito)) está usando la función Organize() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Distrito en orden descendente. Esta función se usa comúnmente para ordenar marcos de datos en R.\n\nnuevo &lt;- arrange(datos_dividi, desc(Distrito))\n\nEn este código, la función datatable() se usa para mostrar el marco de datos datos_dividi como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla\n\nnuevo %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "Ejemplo 6.html",
    "href": "Ejemplo 6.html",
    "title": "Libreria dplyr, Función group_by()",
    "section": "",
    "text": "Se utiliza las funciones group_by() y summarise() de el paquete dplyr para agrupar las filas del marco de datos df por la columna Región y calcular las ventas y ganancias totales para cada región. Esta función se usa comúnmente para resumir marcos de datos en R.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(DT)\n\ndf = read.csv(\"C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv\")\n\ndf_grp_region = df %&gt;% group_by(Region) %&gt;%\n                    summarise(total_sales = sum(Sales),\n                            total_profits = sum(Profit),\n                            .groups = 'drop')\n\nEn este código, la función datatable() se usa para mostrar el marco de datos df_grp_region como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla.\n\n df_grp_region %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "index.html#ejemplo-5",
    "href": "index.html#ejemplo-5",
    "title": "Ejemplo 8",
    "section": "EJEMPLO 5",
    "text": "EJEMPLO 5\nLibreria dplyr, función arrange “2023-07-31”\n\nlibrary(DT)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\nEn este código, la función read.csv() se usa para leer el archivo CSV llamado “DatosPeronales - StringR.csv” ubicado en el directorio de trabajo actual. La ruta del archivo se especifica mediante el argumento del archivo. Después de ejecutar este código, los datos del archivo CSV se almacenarán en la variable datos como un marco de datos.\n\ndatos&lt;- read.csv(file = \"./DatosPeronales - StringR.csv\")\ndatos\n\n        Nombre        Dirección\n1    Juan / 12 Coclé - Penonomé\n2     Ana / 20     Coclé - Natá\n3   Pedro / 34      Coclé - Olá\n4     Rosa / 5    Coclé - Antón\n5  Esther / 56 Coclé - Penonomé\n6   Mario / 17 Coclé - Penonomé\n7   Javier -45     Coclé - Natá\n8  Carlos - 23      Coclé - Olá\n9   Dilia - 22    Coclé - Antón\n10 Indira - 15 Coclé - Penonomé\n\n\nLa función de separación () se utiliza para dividir una columna en varias columnas en función de un delimitador. El argumento into especifica los nombres de las nuevas columnas que se van a crear y el argumento sep especifica el delimitador que se usará para dividir. En este código, la columna Nombre se divide en dos columnas ‘Nombre’ y ‘Edad’ usando los delimitadores - y /. Luego, la columna Dirección se divide en dos columnas ‘Provincia’ y ‘Distrito’ usando el delimitador -.\n\ndatos_dividi &lt;- datos %&gt;% \n  separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"-| /\") %&gt;%\n  separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\") \n\nEl código df &lt;- data.frame( datos_dividi ) utiliza la función data.frame() para crear un nuevo marco de datos df a partir del objeto datos_dividi.\n\ndf &lt;- data.frame( datos_dividi )\n\nEl código de arrange(datos_dividi, Edad) está usando la función de arrange() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Edad. Esta función se usa comúnmente para ordenar marcos de datos en R.\n\narrange(datos_dividi , Edad)\n\n    Nombre Edad Provincia  Distrito\n1     Juan   12    Coclé   Penonomé\n2  Indira    15    Coclé   Penonomé\n3    Mario   17    Coclé   Penonomé\n4      Ana   20    Coclé       Natá\n5   Dilia    22    Coclé      Antón\n6  Carlos    23    Coclé        Olá\n7    Pedro   34    Coclé        Olá\n8     Rosa    5    Coclé      Antón\n9   Esther   56    Coclé   Penonomé\n10 Javier    45    Coclé       Natá\n\n\nEl código nuevo &lt;-arrange(datos_dividi, desc(Distrito)) está usando la función Organize() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Distrito en orden descendente. Esta función se usa comúnmente para ordenar marcos de datos en R.\n\nnuevo &lt;- arrange(datos_dividi, desc(Distrito))\n\nEn este código, la función datatable() se usa para mostrar el marco de datos datos_dividi como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla\n\nnuevo %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "index.html#ejemplo-6",
    "href": "index.html#ejemplo-6",
    "title": "Ejemplo 8",
    "section": "EJEMPLO 6",
    "text": "EJEMPLO 6\n“Libreria dplyr, Función group_by()” “2023-08-05”\nSe utiliza las funciones group_by() y summarise() de el paquete dplyr para agrupar las filas del marco de datos df por la columna Región y calcular las ventas y ganancias totales para cada región. Esta función se usa comúnmente para resumir marcos de datos en R.\n\nlibrary(dplyr)\nlibrary(DT)\n\ndf = read.csv(\"C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv\")\n\ndf_grp_region = df %&gt;% group_by(Region) %&gt;%\n                    summarise(total_sales = sum(Sales),\n                            total_profits = sum(Profit),\n                            .groups = 'drop')\n\nEn este código, la función datatable() se usa para mostrar el marco de datos df_grp_region como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla.\n\n df_grp_region %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "index.html#ejemplo-7",
    "href": "index.html#ejemplo-7",
    "title": "Ejemplo 8",
    "section": "EJEMPLO 7",
    "text": "EJEMPLO 7\n“Librería dplyr, función rename() 5/8/2023\n\nlibrary(DT)\nlibrary(dplyr)\nlibrary(readxl)\n\nLa librería readxl se utiliza para leer archivos de Excel en R.\n\ndatos&lt;- read_excel(\"C:/Users/itzi2/Downloads/dp-gallery-link.xlsx\")\ndatos\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nSe utiliza la función rename() para cambiar el nombre de las columnas en el marco de datos de datos. Los nuevos nombres de columna se especifican mediante la sintaxis new_name = old_name. El marco de datos renombrado resultante se almacena en el objeto nuevos_nombres.\n\nnuevos_nombres &lt;- rename(datos, Materia= Area, Areas = Category, Enlace = Link )\n\nVisualización del resultado en una tabla interactiva utilizando la función datatable() de la librería DT\n\nnuevos_nombres %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)"
  },
  {
    "objectID": "EJEMPLO 7, libreria Dplyr, función rename().html",
    "href": "EJEMPLO 7, libreria Dplyr, función rename().html",
    "title": "Ejemplo 7",
    "section": "",
    "text": "library(DT)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readxl)\n\nLa librería readxl se utiliza para leer archivos de Excel en R.\n\ndatos&lt;- read_excel(\"C:/Users/itzi2/Downloads/dp-gallery-link.xlsx\")\ndatos\n\n# A tibble: 37 × 4\n     `#` Area               Category       Link                                 \n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;          &lt;chr&gt;                                \n 1     1 Health             Cadio Vascular https://dataspeople.ai/post/gallery/…\n 2     2 Agriculture        Wine           https://dataspeople.ai/post/gallery/…\n 3     3 World Economic     Wolrd Econimic https://dataspeople.ai/post/gallery/…\n 4     4 Financial Services Credit         https://dataspeople.ai/post/gallery/…\n 5     5 Insurance          Cars Loss      https://dataspeople.ai/post/gallery/…\n 6     6 Logistic           Supply Chain   https://dataspeople.ai/post/gallery/…\n 7     7 Ambient            Forest Fire    https://dataspeople.ai/post/gallery/…\n 8     8 Retail-Sales       Supermarket    https://dataspeople.ai/post/gallery/…\n 9     9 Health             Disease        https://dataspeople.ai/post/gallery/…\n10    10 Real Estate        Real Estate    https://dataspeople.ai/post/gallery/…\n# ℹ 27 more rows\n\n\nSe utiliza la función rename() para cambiar el nombre de las columnas en el marco de datos de datos. Los nuevos nombres de columna se especifican mediante la sintaxis new_name = old_name. El marco de datos renombrado resultante se almacena en el objeto nuevos_nombres.\n\nnuevos_nombres &lt;- rename(datos, Materia= Area, Areas = Category, Enlace = Link )\n\nVisualización del resultado en una tabla interactiva utilizando la función datatable() de la librería DT\n\nnuevos_nombres %&gt;% datatable(\n  escape = FALSE, \n  rownames = FALSE\n)\n\n\n\n\n\n\n```"
  },
  {
    "objectID": "ejemplo 8.html",
    "href": "ejemplo 8.html",
    "title": "Ejemplo 8",
    "section": "",
    "text": "El paquete caret, incluye una serie de funciones que facilitan el uso de decenas de métodos complejos de clasificación y regresión.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(caret)\n\nLoading required package: ggplot2\n\n\nLoading required package: lattice\n\nload(url('http://verso.mat.uam.es/~joser.berrendero/datos/practica-svm-io.RData'))\n\nLas variables consideradas corresponden a distintos aspectos de la forma del núcleo. El fichero contiene un data frame, llamado breast.cancer2.\nLa función head() en R se usa para mostrar las primeras filas de un marco de datos o una matriz. Le permite inspeccionar rápidamente la estructura y el contenido de los datos.\n\nhead(breast.cancer2)\n\n   x.smoothness x.concavepoints y\n20      0.09779        0.047810 0\n21      0.10750        0.031100 0\n22      0.10240        0.020760 0\n38      0.08983        0.029230 0\n47      0.08600        0.005917 0\n49      0.10310        0.027490 0"
  },
  {
    "objectID": "index.html#ejemplo-8",
    "href": "index.html#ejemplo-8",
    "title": "Ejemplo 8",
    "section": "",
    "text": "El paquete caret, incluye una serie de funciones que facilitan el uso de decenas de métodos complejos de clasificación y regresión.\n\nlibrary(dplyr)\nlibrary(caret)\nlibrary(package = \"lattice\")\ndf = read.csv(\"C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv\")\n\nLas variables consideradas corresponden a distintos aspectos de la forma del núcleo. El fichero contiene un data frame, llamado breast.cancer2.\nLa función head() en R se usa para mostrar las primeras filas de un marco de datos o una matriz. Le permite inspeccionar rápidamente la estructura y el contenido de los datos.\n\nhead(df)\n\n  Row.ID      State Region        Category Sub.Category    Sales    Profit\n1      1   Kentucky  South       Furniture    Bookcases 261.9600   41.9136\n2      2   Kentucky  South       Furniture       Chairs 731.9400  219.5820\n3      3 California   West Office Supplies       Labels  14.6200    6.8714\n4      4    Florida  South       Furniture       Tables 957.5775 -383.0310\n5      5    Florida  South Office Supplies      Storage  22.3680    2.5164\n6      6 California   West       Furniture  Furnishings  48.8600   14.1694\n\n\nGeom_bar es la función que se utiliza en ggplot2 para hacer un gráfico de barras, se agrega al objeto ggplot creado (g) con un +, especificando el color y relleno del gràfico o bien se puede añadir en una capa adicional. Finalemente se agrega el titulo y nombre de la etiqueta en el eje x al gràfico con labs.\n\nlibrary(\"ggplot2\")\ng &lt;- ggplot(df, aes(Sales))+ geom_bar(fill = \"gray\", colour = \"green\")\ng + labs(list(title = \"Datos\", x=\"Sales\"))"
  }
]