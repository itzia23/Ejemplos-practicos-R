[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ejemplos practicos R",
    "section": "",
    "text": "Se cargan los paquetes en el ordenador, y luego se le pide a R que los cargue para usarlos. Hacemos esto mediante el comando library(librería).\nlibrary(tokenizers) utilizando esta funciones proporcionadas por la librería “tokenizers”, se puede tokenizar el texto en palabras, caracteres u otros elementos.\nlibrary(tidyverse) es una colección de paquetes R diseñados para la manipulación, exploración y visualización de datos.\n\nlibrary(tidyverse)\nlibrary(tokenizers)\n\nSegmentación de palabrassegmentación-de-palabras en esta sección vamos a trabajar con un único párrafo. Este ejemplo pertenece al comienzo del último discurso sobre el Estado de la Unión de Barack Obama en 2016.\n\ntexto &lt;- paste(\"También entiendo que como es temporada de elecciones, las expectativas para lo que lograremos este año son bajas. Aún así, señor Presidente de la Cámara de Representantes, aprecio el enfoque constructivo que usted y los otros líderes adoptaron a finales del año pasado para aprobar un presupuesto, y hacer permanentes los recortes de impuestos para las familias trabajadoras. Así que espero que este año podamos trabajar juntos en prioridades bipartidistas como la reforma de la justicia penal y ayudar a la gente que está luchando contra la adicción a fármacos de prescripción. Tal vez podamos sorprender de nuevo a los cínicos.\")\n\nPara procesamiento del texto vamos a usar la función tokenize_words (segmentar palabras) del paquete tokenizers para dividir el texto en palabras individuales.\nImprimir los resultados en la ventana de la consola de R\n\npalabras &lt;- tokenize_words(texto)\n\npalabras\n\n[[1]]\n  [1] \"también\"        \"entiendo\"       \"que\"            \"como\"          \n  [5] \"es\"             \"temporada\"      \"de\"             \"elecciones\"    \n  [9] \"las\"            \"expectativas\"   \"para\"           \"lo\"            \n [13] \"que\"            \"lograremos\"     \"este\"           \"año\"           \n [17] \"son\"            \"bajas\"          \"aún\"            \"así\"           \n [21] \"señor\"          \"presidente\"     \"de\"             \"la\"            \n [25] \"cámara\"         \"de\"             \"representantes\" \"aprecio\"       \n [29] \"el\"             \"enfoque\"        \"constructivo\"   \"que\"           \n [33] \"usted\"          \"y\"              \"los\"            \"otros\"         \n [37] \"líderes\"        \"adoptaron\"      \"a\"              \"finales\"       \n [41] \"del\"            \"año\"            \"pasado\"         \"para\"          \n [45] \"aprobar\"        \"un\"             \"presupuesto\"    \"y\"             \n [49] \"hacer\"          \"permanentes\"    \"los\"            \"recortes\"      \n [53] \"de\"             \"impuestos\"      \"para\"           \"las\"           \n [57] \"familias\"       \"trabajadoras\"   \"así\"            \"que\"           \n [61] \"espero\"         \"que\"            \"este\"           \"año\"           \n [65] \"podamos\"        \"trabajar\"       \"juntos\"         \"en\"            \n [69] \"prioridades\"    \"bipartidistas\"  \"como\"           \"la\"            \n [73] \"reforma\"        \"de\"             \"la\"             \"justicia\"      \n [77] \"penal\"          \"y\"              \"ayudar\"         \"a\"             \n [81] \"la\"             \"gente\"          \"que\"            \"está\"          \n [85] \"luchando\"       \"contra\"         \"la\"             \"adicción\"      \n [89] \"a\"              \"fármacos\"       \"de\"             \"prescripción\"  \n [93] \"tal\"            \"vez\"            \"podamos\"        \"sorprender\"    \n [97] \"de\"             \"nuevo\"          \"a\"              \"los\"           \n[101] \"cínicos\"       \n\n\nfunción length (longitud) para determinar cuantas palabras hay en este fragmento de texto\n\nlength(palabras[[1]])\n\n[1] 101\n\n\nEs posible calcular cuántas veces se utilizó cada palabra en el texto. Para hacer esto, primero aplicamos la función table(tabla) a las palabras en el primer (y aquí, único) documento y después separamos los nombres y los valores de la tabla en un único objeto llamado marco de datos (data frame).\n\ntabla &lt;- table(palabras[[1]])\ntabla &lt;- data_frame(palabra = names(tabla), recuento = as.numeric(tabla))\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\ntabla\n\n# A tibble: 70 × 2\n   palabra   recuento\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 a                4\n 2 adicción         1\n 3 adoptaron        1\n 4 año              3\n 5 aprecio          1\n 6 aprobar          1\n 7 así              2\n 8 aún              1\n 9 ayudar           1\n10 bajas            1\n# ℹ 60 more rows\n\n\nOrdenar datos usando la función arrange(organizar). Esta función toma el conjunto de datos sobre el que trabajar, aquí tabla, y después el nombre de la columna que toma como referencia para ordenarlo. La función desc en el segundo argumento indica que queremos clasificar en orden descendiente.\n\narrange(tabla, desc(recuento))\n\n# A tibble: 70 × 2\n   palabra recuento\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 de             7\n 2 que            6\n 3 la             5\n 4 a              4\n 5 año            3\n 6 los            3\n 7 para           3\n 8 y              3\n 9 así            2\n10 como           2\n# ℹ 60 more rows"
  },
  {
    "objectID": "index.html#ejemplo-4",
    "href": "index.html#ejemplo-4",
    "title": "Ejemplos practicos R",
    "section": "",
    "text": "Se cargan los paquetes en el ordenador, y luego se le pide a R que los cargue para usarlos. Hacemos esto mediante el comando library(librería).\nlibrary(tokenizers) utilizando esta funciones proporcionadas por la librería “tokenizers”, se puede tokenizar el texto en palabras, caracteres u otros elementos.\nlibrary(tidyverse) es una colección de paquetes R diseñados para la manipulación, exploración y visualización de datos.\n\nlibrary(tidyverse)\nlibrary(tokenizers)\n\nSegmentación de palabrassegmentación-de-palabras en esta sección vamos a trabajar con un único párrafo. Este ejemplo pertenece al comienzo del último discurso sobre el Estado de la Unión de Barack Obama en 2016.\n\ntexto &lt;- paste(\"También entiendo que como es temporada de elecciones, las expectativas para lo que lograremos este año son bajas. Aún así, señor Presidente de la Cámara de Representantes, aprecio el enfoque constructivo que usted y los otros líderes adoptaron a finales del año pasado para aprobar un presupuesto, y hacer permanentes los recortes de impuestos para las familias trabajadoras. Así que espero que este año podamos trabajar juntos en prioridades bipartidistas como la reforma de la justicia penal y ayudar a la gente que está luchando contra la adicción a fármacos de prescripción. Tal vez podamos sorprender de nuevo a los cínicos.\")\n\nPara procesamiento del texto vamos a usar la función tokenize_words (segmentar palabras) del paquete tokenizers para dividir el texto en palabras individuales.\nImprimir los resultados en la ventana de la consola de R\n\npalabras &lt;- tokenize_words(texto)\n\npalabras\n\n[[1]]\n  [1] \"también\"        \"entiendo\"       \"que\"            \"como\"          \n  [5] \"es\"             \"temporada\"      \"de\"             \"elecciones\"    \n  [9] \"las\"            \"expectativas\"   \"para\"           \"lo\"            \n [13] \"que\"            \"lograremos\"     \"este\"           \"año\"           \n [17] \"son\"            \"bajas\"          \"aún\"            \"así\"           \n [21] \"señor\"          \"presidente\"     \"de\"             \"la\"            \n [25] \"cámara\"         \"de\"             \"representantes\" \"aprecio\"       \n [29] \"el\"             \"enfoque\"        \"constructivo\"   \"que\"           \n [33] \"usted\"          \"y\"              \"los\"            \"otros\"         \n [37] \"líderes\"        \"adoptaron\"      \"a\"              \"finales\"       \n [41] \"del\"            \"año\"            \"pasado\"         \"para\"          \n [45] \"aprobar\"        \"un\"             \"presupuesto\"    \"y\"             \n [49] \"hacer\"          \"permanentes\"    \"los\"            \"recortes\"      \n [53] \"de\"             \"impuestos\"      \"para\"           \"las\"           \n [57] \"familias\"       \"trabajadoras\"   \"así\"            \"que\"           \n [61] \"espero\"         \"que\"            \"este\"           \"año\"           \n [65] \"podamos\"        \"trabajar\"       \"juntos\"         \"en\"            \n [69] \"prioridades\"    \"bipartidistas\"  \"como\"           \"la\"            \n [73] \"reforma\"        \"de\"             \"la\"             \"justicia\"      \n [77] \"penal\"          \"y\"              \"ayudar\"         \"a\"             \n [81] \"la\"             \"gente\"          \"que\"            \"está\"          \n [85] \"luchando\"       \"contra\"         \"la\"             \"adicción\"      \n [89] \"a\"              \"fármacos\"       \"de\"             \"prescripción\"  \n [93] \"tal\"            \"vez\"            \"podamos\"        \"sorprender\"    \n [97] \"de\"             \"nuevo\"          \"a\"              \"los\"           \n[101] \"cínicos\"       \n\n\nfunción length (longitud) para determinar cuantas palabras hay en este fragmento de texto\n\nlength(palabras[[1]])\n\n[1] 101\n\n\nEs posible calcular cuántas veces se utilizó cada palabra en el texto. Para hacer esto, primero aplicamos la función table(tabla) a las palabras en el primer (y aquí, único) documento y después separamos los nombres y los valores de la tabla en un único objeto llamado marco de datos (data frame).\n\ntabla &lt;- table(palabras[[1]])\ntabla &lt;- data_frame(palabra = names(tabla), recuento = as.numeric(tabla))\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\ntabla\n\n# A tibble: 70 × 2\n   palabra   recuento\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 a                4\n 2 adicción         1\n 3 adoptaron        1\n 4 año              3\n 5 aprecio          1\n 6 aprobar          1\n 7 así              2\n 8 aún              1\n 9 ayudar           1\n10 bajas            1\n# ℹ 60 more rows\n\n\nOrdenar datos usando la función arrange(organizar). Esta función toma el conjunto de datos sobre el que trabajar, aquí tabla, y después el nombre de la columna que toma como referencia para ordenarlo. La función desc en el segundo argumento indica que queremos clasificar en orden descendiente.\n\narrange(tabla, desc(recuento))\n\n# A tibble: 70 × 2\n   palabra recuento\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 de             7\n 2 que            6\n 3 la             5\n 4 a              4\n 5 año            3\n 6 los            3\n 7 para           3\n 8 y              3\n 9 así            2\n10 como           2\n# ℹ 60 more rows"
  },
  {
    "objectID": "index.html#ejemplos-3-r",
    "href": "index.html#ejemplos-3-r",
    "title": "Ejemplos practicos R",
    "section": "Ejemplos 3 R",
    "text": "Ejemplos 3 R\nTidyr es un paquete de R que permite ordenar datos “sucios” para obtener objetos de datos en R, en este caso se utilizará para combinar columnas\n\nlibrary(tidyr)\n\nLectura de datos de archivos xlsx, usando la Liberia readxl\nEl archivo xlsx contiene un marco de datos con las columnas a combinar y es almacenada en la variable datos\n\nlibrary(readxl)\ndatos &lt;- read_excel(\"~/datos.xlsx\")\n\nLa función gather toma múltiples columnas y las une en pares clave-valor. Apartir de “datos” se modifica, “años” en el nombre de la nueva columna y “ventas” es para almacenar los valores originales\n\nlibrary(tidyr)\ninforme &lt;- datos %&gt;% gather(años, ventas, \"2009\":\"2012\") \ninforme\n\n# A tibble: 12 × 3\n   Cliente años  ventas\n   &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n 1 María   2009    1289\n 2 Juan    2009     900\n 3 Mauro   2009     750\n 4 María   2010    1400\n 5 Juan    2010    1175\n 6 Mauro   2010     800\n 7 María   2011    1450\n 8 Juan    2011    1175\n 9 Mauro   2011     810\n10 María   2012    1500\n11 Juan    2012    1250\n12 Mauro   2012     815\n\n\n\nlibrary(ggplot2)\n\n\nggplot(\n informe,\n  aes(x = informe$Cliente, y = informe$ventas, color = informe$años)) + \n  geom_point() +\n  labs(x = \"cliente\", y = \"ventas\") +\n  theme(legend.position = \"bottom\")\n\nWarning: Use of `informe$Cliente` is discouraged.\nℹ Use `Cliente` instead.\n\n\nWarning: Use of `informe$ventas` is discouraged.\nℹ Use `ventas` instead.\n\n\nWarning: Use of `informe$años` is discouraged.\nℹ Use `años` instead."
  },
  {
    "objectID": "index.html#ejemplo-2",
    "href": "index.html#ejemplo-2",
    "title": "Ejemplos practicos R",
    "section": "Ejemplo 2",
    "text": "Ejemplo 2\n\nCargar el paquete dplyr y DT:\n\n\nlibrary(dplyr)\nlibrary(DT)\n\n\nUtilizar la función filter() para filtrar el dataset de iris y seleccionar solo las filas que cumplan con ciertas condiciones. Por ejemplo, seleccionar las filas donde la longitud del sépalo sea mayor a 5:\n\n\niris_filtrado &lt;- iris %&gt;% filter(Sepal.Length &gt; 5)\n\n\niris_filtrado &lt;- head(iris_filtrado, 30)\niris_filtrado[1] %&gt;% datatable\n\n\n\n\n\n\n\nUtilizar la función select() para seleccionar solo las columnas deseadas del dataset. Por ejemplo, seleccionar las columnas de longitud del sépalo y ancho del pétalo:\n\n\niris_seleccionado &lt;- iris_filtrado %&gt;% select(Sepal.Length, Petal.Width)\n\n\nUtilizar la función mutate() para crear una nueva columna en el dataset basada en cálculos o transformaciones de las columnas existentes. Por ejemplo, crear una columna que calcule el producto de la longitud del sépalo y el ancho del pétalo:\n\n\niris_transformado &lt;- iris_seleccionado %&gt;% mutate(Nueva_Columna = Sepal.Length * Petal.Width)\n\n\nUtilizar la función arrange() para ordenar el dataset en base a una columna específica. Por ejemplo, ordenar el dataset por la longitud del sépalo de forma descendente:\n\n\niris_ordenado &lt;- iris_transformado %&gt;% arrange(desc(Sepal.Length))\n\n\niris_ordenado[1] %&gt;% datatable"
  }
]