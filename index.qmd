## EJEMPLO 9

## Ordenando columnas, según director que ha hecho la película más larga y peliculas repetidas

```{r, message=FALSE}

library(dplyr)
library (base)
library(readxl)
library(openxlsx)
library(DT)


# Leer el archivo de Excel
datos_excel3 <- read.csv("C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/imdb2006-2016.csv")
df<- data.frame(datos_excel3)
```

Guardando archivo csv a .xlsx con el nombre Asignacion6

```{r, message=FALSE}
write.xlsx(df,"C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Asignacion6.xlsx", sheetName = "datos")
```

lectura del archivo .xlsx con el nombre Asignacion6

```{r, message=FALSE}
datos_excel4 <- read_xlsx("C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Asignacion6.xlsx")

```

Película duplicada arrange(-n), para ordenar de mayor a menor los valores de count() count() para contar el número de veces que aparece cada título en el data frame datos_excel4.

```{r, message=FALSE}
peli_dupli<- datos_excel4 %>% count(Title) %>% arrange(-n)
datatable (peli_dupli)
```

arrange() ordenar el data frame datos_excel4 por la columna Runtime_Minutes. slice(1:50) selecciona las 50 primeras filas y select() se usa para extraer solo las columnas "Director" y "Runtime_Minutes" de los datos_seleccionados.

```{r}
datos_excel4 %>%  arrange(desc(Runtime..Minutes.)) %>% slice(1:50) %>% select(Director,Runtime..Minutes.)
datatable(datos_excel4)
```

## [Asignación 5 Operaciones en columna B](./Asignación5_columnaB)

## [Asignación 5 Operaciones en columnas A](./Asignación5_operacion.qmd)

## [Limpieza de datos Asignación 4](./Limpieza%20de%20datos.qmd)

## Ejemplo 8

El paquete caret, incluye una serie de funciones que facilitan el uso de decenas de métodos complejos de clasificación y regresión.

```{r, message=FALSE}
library(dplyr)
library(caret)
library(package = "lattice")
df = read.csv("C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv")
```

Las variables consideradas corresponden a distintos aspectos de la forma del núcleo. El fichero contiene un data frame, llamado breast.cancer2.

La función head() en R se usa para mostrar las primeras filas de un marco de datos o una matriz. Le permite inspeccionar rápidamente la estructura y el contenido de los datos.

```{r}
head(df)
```

Geom_bar es la función que se utiliza en ggplot2 para hacer un gráfico de barras, se agrega al objeto ggplot creado (g) con un +, especificando el color y relleno del gràfico o bien se puede añadir en una capa adicional. Finalemente se agrega el titulo y nombre de la etiqueta en el eje x al gràfico con labs.

```{r}
library("ggplot2")
g <- ggplot(df, aes(Sales))+ geom_bar(fill = "gray", colour = "green")
g + labs(list(title = "Datos", x="Sales"))
```

## EJEMPLO 7

"Librería dplyr, función rename() 5/8/2023

```{r}
library(DT)
library(dplyr)
library(readxl)
```

La librería readxl se utiliza para leer archivos de Excel en R.

```{r,message=FALSE}

dat3<- read_excel("C:/Users/itzi2/Downloads/dp-gallery-link.xlsx")
dat3
```

Se utiliza la función rename() para cambiar el nombre de las columnas en el marco de datos de datos. Los nuevos nombres de columna se especifican mediante la sintaxis new_name = old_name. El marco de datos renombrado resultante se almacena en el objeto nuevos_nombres.

```{r}
nuevos_nombres <- rename(dat3, Materia= Area, Areas = Category, Enlace = Link )
```

Visualización del resultado en una tabla interactiva utilizando la función datatable() de la librería DT

```{r}

nuevos_nombres %>% datatable(
  escape = FALSE, 
  rownames = FALSE
)
```

## EJEMPLO 6

"Libreria dplyr, Función group_by()" "2023-08-05"

Se utiliza las funciones group_by() y summarise() de el paquete dplyr para agrupar las filas del marco de datos df por la columna Región y calcular las ventas y ganancias totales para cada región. Esta función se usa comúnmente para resumir marcos de datos en R.

```{r,message=FALSE}
library(dplyr)
library(DT)

df = read.csv("C:/Users/itzi2/Documents/ejemplos/Ejemplos practicos R/Sample_Superstore.csv")

df_grp_region = df %>% group_by(Region) %>%
					summarise(total_sales = sum(Sales),
							total_profits = sum(Profit),
							.groups = 'drop')

```

En este código, la función datatable() se usa para mostrar el marco de datos df_grp_region como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla.

```{r}
 df_grp_region %>% datatable(
  escape = FALSE, 
  rownames = FALSE
)
```

## EJEMPLO 5

Libreria dplyr, función arrange "2023-07-31"

```{r}
library(DT)
library(dplyr)
library(tidyr)
library(stringr)
```

En este código, la función read.csv() se usa para leer el archivo CSV llamado "DatosPeronales - StringR.csv" ubicado en el directorio de trabajo actual. La ruta del archivo se especifica mediante el argumento del archivo. Después de ejecutar este código, los datos del archivo CSV se almacenarán en la variable datos como un marco de datos.

```{r}
dat_2 <- read.csv(file = "./DatosPeronales - StringR.csv")
dat_2
```

La función de separación () se utiliza para dividir una columna en varias columnas en función de un delimitador. El argumento into especifica los nombres de las nuevas columnas que se van a crear y el argumento sep especifica el delimitador que se usará para dividir. En este código, la columna Nombre se divide en dos columnas 'Nombre' y 'Edad' usando los delimitadores - y /. Luego, la columna Dirección se divide en dos columnas 'Provincia' y 'Distrito' usando el delimitador -.

```{r}
datos_dividi <- dat_2 %>% 
  separate(Nombre, into = c("Nombre", "Edad"), sep = "-| /") %>%
  separate(Dirección, into = c("Provincia", "Distrito"), sep = "-") 
```

El código df \<- data.frame( datos_dividi ) utiliza la función data.frame() para crear un nuevo marco de datos df a partir del objeto datos_dividi.

```{r}
df <- data.frame( datos_dividi )
```

El código de arrange(datos_dividi, Edad) está usando la función de arrange() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Edad. Esta función se usa comúnmente para ordenar marcos de datos en R.

```{r}
arrange(datos_dividi , Edad)
```

El código nuevo \<-arrange(datos_dividi, desc(Distrito)) está usando la función Organize() del paquete dplyr para ordenar las filas del marco de datos datos_dividi por los valores en la columna Distrito en orden descendente. Esta función se usa comúnmente para ordenar marcos de datos en R.

```{r}
nuevo <- arrange(datos_dividi, desc(Distrito))
```

En este código, la función datatable() se usa para mostrar el marco de datos datos_dividi como una tabla interactiva. El argumento de escape se establece en FALSO para evitar que se escapen las entidades HTML, y el argumento de nombres de fila se establece en FALSO para ocultar los nombres de fila en la tabla

```{r}
nuevo %>% datatable(
  escape = FALSE, 
  rownames = FALSE
)
```

## [Asignación 3](Dividir%20texto%20en%20Columna%20stringr.qmd)

## [Asignación 2](ejemplo%20de%20hiperlink.qmd)

## [Asignación 1](practica-de-asignacion-1.qmd)

## Ejemplo 4

Se cargan los paquetes en el ordenador, y luego se le pide a R que los cargue para usarlos. Hacemos esto mediante el comando library(librería).

library(tokenizers) utilizando esta funciones proporcionadas por la librería "tokenizers", se puede tokenizar el texto en palabras, caracteres u otros elementos.

library(tidyverse) es una colección de paquetes R diseñados para la manipulación, exploración y visualización de datos.

```{r,message=FALSE}
library(tidyverse)
library(tokenizers)

```

Segmentación de palabrassegmentación-de-palabras en esta sección vamos a trabajar con un único párrafo. Este ejemplo pertenece al comienzo del último discurso sobre el Estado de la Unión de Barack Obama en 2016.

```{r}
texto <- paste("También entiendo que como es temporada de elecciones, las expectativas para lo que lograremos este año son bajas. Aún así, señor Presidente de la Cámara de Representantes, aprecio el enfoque constructivo que usted y los otros líderes adoptaron a finales del año pasado para aprobar un presupuesto, y hacer permanentes los recortes de impuestos para las familias trabajadoras. Así que espero que este año podamos trabajar juntos en prioridades bipartidistas como la reforma de la justicia penal y ayudar a la gente que está luchando contra la adicción a fármacos de prescripción. Tal vez podamos sorprender de nuevo a los cínicos.")
```

Para procesamiento del texto vamos a usar la función tokenize_words (segmentar palabras) del paquete tokenizers para dividir el texto en palabras individuales.

Imprimir los resultados en la ventana de la consola de R

```{r}
palabras <- tokenize_words(texto)

palabras
```

función length (longitud) para determinar cuantas palabras hay en este fragmento de texto

```{r}
length(palabras[[1]])
```

Es posible calcular cuántas veces se utilizó cada palabra en el texto. Para hacer esto, primero aplicamos la función table(tabla) a las palabras en el primer (y aquí, único) documento y después separamos los nombres y los valores de la tabla en un único objeto llamado marco de datos (data frame).

```{r}
tabla <- table(palabras[[1]])
tabla <- data_frame(palabra = names(tabla), recuento = as.numeric(tabla))
tabla
```

Ordenar datos usando la función arrange(organizar). Esta función toma el conjunto de datos sobre el que trabajar, aquí tabla, y después el nombre de la columna que toma como referencia para ordenarlo. La función desc en el segundo argumento indica que queremos clasificar en orden descendiente.

```{r}
arrange(tabla, desc(recuento))
```

## Ejemplos 3 R

*Tidyr* es un paquete de R que permite ordenar datos *"sucios"* para obtener objetos de datos en R, en este caso se utilizará para combinar columnas

```{r}
library(tidyr)
```

Lectura de datos de archivos xlsx, usando la Liberia readxl

El archivo xlsx contiene un marco de datos con las columnas a combinar y es almacenada en la variable datos

```{r}
library(readxl)
datos <- read_excel("~/datos.xlsx")

```

La función `gather` toma múltiples columnas y las une en pares clave-valor. Apartir de "datos" se modifica, "años" en el nombre de la nueva columna y "ventas" es para almacenar los valores originales

```{r}
library(tidyr)
informe <- datos %>% gather(años, ventas, "2009":"2012") 
informe
```

```{r}

library(ggplot2)

```

```{r}
ggplot(
 informe,
  aes(x = informe$Cliente, y = informe$ventas, color = informe$años)) + 
  geom_point() +
  labs(x = "cliente", y = "ventas") +
  theme(legend.position = "bottom")
```

## Ejemplo 2

1.  Cargar el paquete dplyr y DT:

```{r pressure, message=FALSE}
library(dplyr)
library(DT)
```

2.  Utilizar la función **`filter()`** para filtrar el dataset de iris y seleccionar solo las filas que cumplan con ciertas condiciones. Por ejemplo, seleccionar las filas donde la longitud del sépalo sea mayor a 5:

```{r}
iris_filtrado <- iris %>% filter(Sepal.Length > 5)
```

```{r}
iris_filtrado <- head(iris_filtrado, 30)
iris_filtrado[1] %>% datatable
```

3.  Utilizar la función **`select()`** para seleccionar solo las columnas deseadas del dataset. Por ejemplo, seleccionar las columnas de longitud del sépalo y ancho del pétalo:

```{r}
iris_seleccionado <- iris_filtrado %>% select(Sepal.Length, Petal.Width)
```

4.  Utilizar la función **`mutate()`** para crear una nueva columna en el dataset basada en cálculos o transformaciones de las columnas existentes. Por ejemplo, crear una columna que calcule el producto de la longitud del sépalo y el ancho del pétalo:

```{r}
iris_transformado <- iris_seleccionado %>% mutate(Nueva_Columna = Sepal.Length * Petal.Width)
```

5.  Utilizar la función **`arrange()`** para ordenar el dataset en base a una columna específica. Por ejemplo, ordenar el dataset por la longitud del sépalo de forma descendente:

```{r}
iris_ordenado <- iris_transformado %>% arrange(desc(Sepal.Length))
```

```{r}
iris_ordenado[1] %>% datatable
```
